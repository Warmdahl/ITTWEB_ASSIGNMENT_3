#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ittweb-assignment3:server');
var http = require('http');
const https = require('https')

const {Server} = require('ws');
const { timeStamp } = require('console');
var highscorecontroller = require('../Controllers/highscorecontroller');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//Setup WebSocket
const wsServer = new Server({server});


setInterval(() => {
  wsServer.clients.forEach((client) => {
    client.send(new Date().toTimeString());
  });
}, 1000);


wsServer.on('connection',async websocket => {
  websocket.send('Hello from the two-way WebSocket server');
  var highscores = await highscorecontroller.GetNHighest();
  websocket.send(JSON.stringify(highscores));

  websocket.onmessage = async (message) =>{
    console.log('The server received: ' + message['data']);
    await highscorecontroller.AddHighScore(JSON.parse(message['data']))
    var highscores = await highscorecontroller.GetNHighest();
    wsServer.clients.forEach(client => client.send(JSON.stringify(highscores)))
  };

  websocket.onerror = (error) =>
    console.log('The server received: ' + error['code']);
  
  websocket.onclose = (why) =>
    console.log('The server received: ' + why.code + why.reason);

});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
